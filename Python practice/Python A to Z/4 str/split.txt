
def change(name):  # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ change ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶®‡ßá‡ßü: name
    first_name, last_name = name.split(" ")  # name-‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ (" ") ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡¶§‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá
    return first_name, last_name  # ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶®‡¶æ‡¶Æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá
print(change("John Doe"))  # ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá
name.split(" ") ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßÄ?
"John Doe".split(" ") ‚Üí ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø string ‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá list ‡¶¨‡¶æ‡¶®‡¶æ‡ßü:

["John", "Doe"]
‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶è‡¶á list ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶â‡¶™‡¶æ‡¶¶‡¶æ‡¶® first_name, ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü‡¶ü‡¶æ last_name ‡¶π‡ßü‡•§

Output ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá?
('John', 'Doe')
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ tuple: (first_name, last_name) = ("John", "Doe")

‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡ßã tuple/return, ‡¶®‡¶ø‡¶ö‡ßá‡¶∞‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßã:
fname, lname = change("John Doe")
print("First name:", fname)
print("Last name:", lname)
Output:

First name: John
Last name: Doe
‡¶ö‡¶æ‡¶á‡¶≤‡ßá change() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá list ‡¶¨‡¶æ dictionary ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá‡¶ì return ‡¶ï‡¶∞‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü ‚Äî ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶¨‡¶≤‡ßã, ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?








You said:
    @full_name.setter
    def full_name(self, name):
        first_name, last_name = name.split(" ") # split the name into first_name and last_name respectively
        self.first_name = first_name
        self.last_name = last_name eikhane str


ChatGPT said:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßã, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá Python-‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø property setter method‚Äî‡¶Ø‡ßá‡¶ü‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶π‡ßü‡¶§‡ßã full_name ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø property ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡ßá‡¶â object.full_name = "John Doe" ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ first_name ‡¶Ü‡¶∞ last_name ‡¶è ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì: name.split(" ") ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ø‡¶¶‡¶ø name string ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá? ‡¶®‡¶ø‡¶ö‡ßá ‡¶™‡ßÅ‡¶∞‡ßã ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø‡•§

‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡ßã‡¶° ‡¶∏‡¶π ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:
class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"

    @full_name.setter
    def full_name(self, name):
        first_name, last_name = name.split(" ")  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá name ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á string ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá
        self.first_name = first_name
        self.last_name = last_name
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
p = Person("John", "Doe")
print(p.full_name)  # ‚ûú John Doe

p.full_name = "Jane Smith"  # setter ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
print(p.first_name)  # ‚ûú Jane
print(p.last_name)   # ‚ûú Smith
‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø name string ‡¶®‡¶æ ‡¶π‡ßü?
‡¶Ø‡ßá‡¶Æ‡¶®:
p.full_name = 12345
‡¶§‡¶æ‡¶π‡¶≤‡ßá name.split(" ") ‡¶è AttributeError ‡¶π‡¶¨‡ßá, ‡¶ï‡¶æ‡¶∞‡¶£ int ‡¶ü‡¶æ‡¶á‡¶™‡ßá .split() ‡¶Æ‡ßá‡¶•‡¶° ‡¶®‡ßá‡¶á‡•§

Error:
AttributeError: 'int' object has no attribute 'split'
‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®: type-check ‡¶ï‡¶∞‡ßá exception ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
@full_name.setter
def full_name(self, name):
    if not isinstance(name, str):
        raise ValueError("Full name must be a string.")
    parts = name.split(" ")
    if len(parts) != 2:
        raise ValueError("Full name must contain exactly first and last name.")
    self.first_name, self.last_name = parts
‡¶è‡¶ñ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßá‡¶â ‡¶≠‡ßÅ‡¶≤ string ‡¶¶‡ßá‡ßü, ‡¶¨‡¶æ int ‡¶¶‡ßá‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á error show ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§

üîö ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:
split(" ") ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶ì ‡¶Ø‡ßá input str ‡¶ü‡¶æ‡¶á‡¶™‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá try-except ‡¶õ‡¶æ‡ßú‡¶æ‡¶ì isinstance() ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§

setter method ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá always validation ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã practice‡•§

‡¶Ü‡¶∞‡ßã ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶≤‡¶æ‡¶ó‡¶≤‡ßá ‡¶¨‡¶≤‡ßã, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§








You said:
eta str type dekhai keno


ChatGPT said:
‡¶§‡ßÅ‡¶Æ‡¶ø @full_name.setter ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá name.split(" ") ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßã, ‡¶§‡¶æ‡¶á Python ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá name ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡¶ü‡¶æ string ‡¶π‡¶ì‡ßü‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§ ‡¶ï‡¶æ‡¶∞‡¶£ .split() ‡¶Æ‡ßá‡¶•‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ string object-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

üîç ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: "eta str type dekhai keno?"
‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶π‡¶≤‡ßã:

first_name, last_name = name.split(" ")
‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡ßá name-‡¶ï‡ßá .split(" ") ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚Äî ‡¶è‡¶ü‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶§‡¶ñ‡¶®‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶ñ‡¶® name ‡¶è‡¶ï‡¶ü‡¶æ string‡•§

‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì:
class Person:
    def __init__(self, first, last):
        self.first_name = first
        self.last_name = last

    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"

    @full_name.setter
    def full_name(self, name):
        print(type(name))  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá type ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        first_name, last_name = name.split(" ")
        self.first_name = first_name
        self.last_name = last_name
‡¶è‡¶¨‡¶Ç ‡¶è‡¶∞‡¶™‡¶∞ ‡¶è‡¶á‡¶ü‡¶æ ‡¶¶‡¶æ‡¶ì:
p = Person("John", "Doe")
p.full_name = "Jane Smith"
Output ‡¶π‡¶¨‡ßá:
<class 'str'>
‡¶ï‡¶æ‡¶∞‡¶£ "Jane Smith" ‡¶è‡¶ï‡¶ü‡¶æ string ‚Äî ‡¶§‡¶æ‡¶á type(name) ‡¶¶‡ßá‡¶ñ‡¶æ‡¶≤‡ßá <class 'str'> ‡¶Ü‡¶∏‡¶¨‡ßá‡•§

‡¶Ø‡¶¶‡¶ø ‡¶§‡ßÅ‡¶Æ‡¶ø int ‡¶¶‡¶æ‡¶ì:
p.full_name = 12345
‡¶§‡¶æ‡¶π‡¶≤‡ßá error ‡¶Ü‡¶∏‡¶¨‡ßá:
AttributeError: 'int' object has no attribute 'split'
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶¶‡¶ø print(type(name)) ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶ó‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡ßã, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶æ‡¶¨‡ßá:
p.full_name = 12345
‡¶§‡¶æ‡¶π‡¶≤‡ßá error ‡¶Ü‡¶∏‡¶¨‡ßá:
AttributeError: 'int' object has no attribute 'split'
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶¶‡¶ø print(type(name)) ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶ó‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡ßã, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶æ‡¶¨‡ßá:

<class 'int'>
‡¶§‡¶æ‡¶á ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶¶‡¶ø "John Doe" string assign ‡¶ï‡¶∞‡ßã, Python ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ type naturally <class 'str'> ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§

‡¶ï‡¶æ‡¶∞‡¶£ .split(" ") call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü Python internally str.split() ‡¶ö‡¶æ‡ßü‡•§

‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ string ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá error ‡¶¶‡¶ø‡¶¨‡ßá ‚Äî ‡¶§‡¶æ‡¶á ‡¶Ü‡¶ó‡ßá‡¶á type(name) check ‡¶ï‡¶∞‡¶æ best practice‡•§

‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶á code-ta interactive ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡¶§‡ßá‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡¶æ‡¶§‡ßá type error handle ‡¶π‡ßü‡•§ ‡¶¨‡¶≤‡ßã, ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶ï‡¶ø?


‡¶π‡ßç‡¶Ø‡¶æ‡¶Å! ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶†‡¶ø‡¶ï ‡¶ß‡¶∞‡ßá‡¶õ‡ßã ‚Äî split() method list return ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶æ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡¶õ‡¶ø:

üîπ split() ‡¶ï‡ßÄ ‡¶ï‡¶∞‡ßá?
str.split(" ") üëâ ‡¶è‡¶ï‡¶ü‡¶ø string ‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßá‡¶ü‡ßá list ‡¶¨‡¶æ‡¶®‡¶æ‡ßü‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
name = "John Doe"
parts = name.split(" ")
print(parts)
Output:
['John', 'Doe']
‡¶è‡¶ñ‡¶æ‡¶®‡ßá parts ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø list: ['John', 'Doe']

‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶æ ‡¶ï‡ßÄ ‡¶ï‡¶∞‡ßá?
first_name, last_name = name.split(" ")
‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá Python unpacking ‚Äî split ‡¶è‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ (‡¶è‡¶ï‡¶ü‡¶ø list) ‡¶è‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø item ‡¶ï‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡ßá unpack ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

‡¶∏‡¶Æ‡¶æ‡¶® ‡¶Æ‡¶æ‡¶®‡ßá:
parts = name.split(" ")
first_name = parts[0]
last_name = parts[1]
‡¶§‡¶¨‡ßá Python ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶∂‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶¶‡ßá‡ßü:
first_name, last_name = name.split(" ")
‡¶Ø‡¶¶‡¶ø list ‡¶è‡¶∞ length 2 ‡¶®‡¶æ ‡¶π‡ßü?
name = "John Michael Doe"
first_name, last_name = name.split(" ")
Error ‡¶π‡¶¨‡ßá:
ValueError: too many values to unpack (expected 2)
parts = name.split(" ")
first_name = parts[0]
last_name = parts[1]
‡¶§‡¶¨‡ßá Python ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶∂‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶¶‡ßá‡ßü:

first_name, last_name = name.split(" ")
‡¶Ø‡¶¶‡¶ø list ‡¶è‡¶∞ length 2 ‡¶®‡¶æ ‡¶π‡ßü?
name = "John Michael Doe"
first_name, last_name = name.split(" ")
Error ‡¶π‡¶¨‡ßá:
ValueError: too many values to unpack (expected 2)
parts = name.split(" ")
first_name = parts[0]
last_name = parts[1]
‡¶§‡¶¨‡ßá Python ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶∂‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶¶‡ßá‡ßü:

first_name, last_name = name.split(" ")
‡¶Ø‡¶¶‡¶ø list ‡¶è‡¶∞ length 2 ‡¶®‡¶æ ‡¶π‡ßü?
name = "John Michael Doe"
first_name, last_name = name.split(" ")
Error ‡¶π‡¶¨‡ßá:
ValueError: too many values to unpack (expected 2)
name = "John Michael Doe"
first_name, last_name = name.split(" ")
Error ‡¶π‡¶¨‡ßá:
ValueError: too many values to unpack (expected 2)
‡¶ï‡¶æ‡¶∞‡¶£ "John Michael Doe".split(" ") ‚ûú ['John', 'Michael', 'Doe'] (3‡¶ü‡¶æ item), ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ö‡¶æ‡¶ö‡ßç‡¶õ‡¶ø 2‡¶ü‡¶æ ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡•§

‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:
parts = name.split(" ")
if len(parts) == 2:
    first_name, last_name = parts
else:
    raise ValueError("Full name must contain exactly first and last name.")
üîö ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá:
Function	Return type
split(" ")	list
first, last = ...	unpacking