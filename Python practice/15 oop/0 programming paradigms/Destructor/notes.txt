Destructor ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Æ‡ßá‡¶•‡¶° ‡¶Ø‡ßá‡¶ü‡¶ø ‡¶ï‡ßã‡¶®‡ßã object destroy (‡¶¨‡¶æ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá remove) ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶ï‡¶≤ ‡¶π‡¶Ø‡¶º‡•§ ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé, ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶´‡¶ü‡¶æ‡¶á‡¶Æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º (‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ø‡¶ñ‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ), ‡¶§‡¶ñ‡¶® destructor ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º ‚Äî ‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ, ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶ï‡¶∞‡¶æ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§

üîπ Destructor-‡¶è‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø:
‡¶è‡¶ü‡¶ø ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶ï‡¶≤ ‡¶π‡¶Ø‡¶º ‡¶Ø‡¶ñ‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ß‡ßç‡¶¨‡¶Ç‡¶∏ (delete) ‡¶π‡¶Ø‡¶º‡•§

‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ __del__() (Python ‡¶è)‡•§

C++/Java/C#-‡¶è destructor-‡¶è‡¶∞ syntax ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡ßü‡•§

üî∏ Python-‡¶è Destructor ‡¶è‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
python
Copy
Edit
class Student:
    def __init__(self, name):
        self.name = name
        print(f"{self.name} created!")

    def __del__(self):
        print(f"{self.name} destroyed!")

# ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø
s1 = Student("Omar")

# ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü destroy
del s1
‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü:

nginx
Copy
Edit
Omar created!
Omar destroyed!
üî∏ C++ ‡¶è Destructor:
cpp
Copy
Edit
#include <iostream>
using namespace std;

class Student {
public:
    Student() {
        cout << "Constructor called" << endl;
    }

    ~Student() {
        cout << "Destructor called" << endl;
    }
};

int main() {
    Student s1;  // scope ‡¶è‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá destructor ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá
}
üîπ Destructor ‡¶ï‡¶¨‡ßá ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü?
‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø dynamic resource (‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø, ‡¶´‡¶æ‡¶á‡¶≤, ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï connection) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§

‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ï (memory leak) ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá‡•§

‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®:
Python-‡¶è‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá destructor ‡¶ï‡¶≤ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá Garbage Collector ‡¶ï‡¶¨‡ßá object ‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞‡•§

‡¶§‡¶¨‡ßá C++ ‡¶è scope ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá destructor ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶ï‡¶≤ ‡¶π‡ßü‡•§
üîß Destructor ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá? (Working of Destructor)

Step-by-step process:
1. Object Create ‡¶π‡ßü
‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡•§ ‡¶è‡¶á ‡¶∏‡¶Æ‡ßü __init__() (Python) ‡¶¨‡¶æ constructor ‡¶ï‡¶≤ ‡¶π‡ßü‡•§

2. Object ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü
‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶Ø‡¶ñ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶Ü‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ‚Äî ‡¶§‡¶ñ‡¶® Python-‡¶è‡¶∞ Garbage Collector ‡¶Ö‡¶•‡¶¨‡¶æ C++ ‡¶è‡¶∞ scope determine ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ñ‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü destroy ‡¶π‡¶¨‡ßá‡•§

3. Destructor ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶ï‡¶≤ ‡¶π‡ßü
‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü destroy ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶ó‡ßá destructor method ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶ï‡¶≤ ‡¶π‡ßü‡•§ ‡¶è‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶ø cleanup ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§

4. Resource Free ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶æ‡¶á‡¶≤, ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø, ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï resource ‡¶Ø‡¶æ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø‡¶≤ ‡¶§‡¶æ release ‡¶π‡ßü‡•§

üî∏ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (Python):
python
Copy
Edit
class FileHandler:
    def __init__(self, filename):
        self.file = open(filename, "w")
        print("File opened.")

    def write_data(self, data):
        self.file.write(data)

    def __del__(self):
        self.file.close()
        print("File closed (Destructor called).")

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
handler = FileHandler("data.txt")
handler.write_data("Hello, world!")

# ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü delete
del handler
üìå ‡¶è‡¶ñ‡¶æ‡¶®‡ßá __del__() destructor file close ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡¶ñ‡¶® handler object ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡•§

üî∏ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (C++):
cpp
Copy
Edit
#include <iostream>
using namespace std;

class MyClass {
public:
    MyClass() {
        cout << "Constructor called" << endl;
    }

    ~MyClass() {
        cout << "Destructor called" << endl;
    }
};

int main() {
    MyClass obj;  // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá constructor ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá
    // main ‡¶è‡¶∞ scope ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá destructor ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá
}
‚ö†Ô∏è ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®:
Python-‡¶è destructor ‡¶ï‡¶ñ‡¶® ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá garbage collector-‡¶è‡¶∞ ‡¶â‡¶™‡¶∞‡•§

C++-‡¶è ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü scope ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶á destructor ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶ï‡¶≤ ‡¶π‡ßü‡•§

Destructor-‡¶è ‡¶è‡¶Æ‡¶® ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶Ø‡¶æ object destroy ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ (ex: ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß, ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ï‡ßç‡¶≤‡ßã‡¶ú, ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶´‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ)‡•§


